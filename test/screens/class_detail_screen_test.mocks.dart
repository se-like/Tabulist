// Mocks generated by Mockito 5.4.6 from annotations
// in tabulist/test/screens/class_detail_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i4;
import 'package:tabulist/models/class.dart' as _i3;
import 'package:tabulist/models/master_data.dart' as _i7;
import 'package:tabulist/providers/master_data_provider.dart' as _i6;
import 'package:tabulist/providers/timetable_provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TimetableProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimetableProvider extends _i1.Mock implements _i2.TimetableProvider {
  MockTimetableProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Class> get classes => (super.noSuchMethod(
        Invocation.getter(#classes),
        returnValue: <_i3.Class>[],
      ) as List<_i3.Class>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addClass(
    _i3.Class? newClass, {
    _i4.SharedPreferences? prefs,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addClass,
          [newClass],
          {#prefs: prefs},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateClass(
    _i3.Class? updatedClass, {
    _i4.SharedPreferences? prefs,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateClass,
          [updatedClass],
          {#prefs: prefs},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteClass(
    String? id, {
    _i4.SharedPreferences? prefs,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteClass,
          [id],
          {#prefs: prefs},
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.Class> getClassesForDay(int? dayOfWeek) => (super.noSuchMethod(
        Invocation.method(
          #getClassesForDay,
          [dayOfWeek],
        ),
        returnValue: <_i3.Class>[],
      ) as List<_i3.Class>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MasterDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMasterDataProvider extends _i1.Mock
    implements _i6.MasterDataProvider {
  MockMasterDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.Subject> get subjects => (super.noSuchMethod(
        Invocation.getter(#subjects),
        returnValue: <_i7.Subject>[],
      ) as List<_i7.Subject>);

  @override
  List<_i7.Teacher> get teachers => (super.noSuchMethod(
        Invocation.getter(#teachers),
        returnValue: <_i7.Teacher>[],
      ) as List<_i7.Teacher>);

  @override
  List<_i7.Room> get rooms => (super.noSuchMethod(
        Invocation.getter(#rooms),
        returnValue: <_i7.Room>[],
      ) as List<_i7.Room>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> loadMasterData() => (super.noSuchMethod(
        Invocation.method(
          #loadMasterData,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addSubject(_i7.Subject? subject) => (super.noSuchMethod(
        Invocation.method(
          #addSubject,
          [subject],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addTeacher(_i7.Teacher? teacher) => (super.noSuchMethod(
        Invocation.method(
          #addTeacher,
          [teacher],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addRoom(_i7.Room? room) => (super.noSuchMethod(
        Invocation.method(
          #addRoom,
          [room],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateSubject(_i7.Subject? subject) => (super.noSuchMethod(
        Invocation.method(
          #updateSubject,
          [subject],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTeacher(_i7.Teacher? teacher) => (super.noSuchMethod(
        Invocation.method(
          #updateTeacher,
          [teacher],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateRoom(_i7.Room? room) => (super.noSuchMethod(
        Invocation.method(
          #updateRoom,
          [room],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteSubject(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSubject,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTeacher(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTeacher,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteRoom(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRoom,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
